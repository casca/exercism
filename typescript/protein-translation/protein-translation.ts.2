enum Protein {
  Methionine = 'Methionine',
  Phenylalanine = 'Phenylalanine',
  Leucine = 'Leucine',
  Serine = 'Serine',
  Tyrosine = 'Tyrosine',
  Cysteine = 'Cysteine',
  Tryptophan = 'Tryptophan',
  STOP = 'STOP',
}

class Codon {
  private readonly protein: Protein;

  constructor(private codon: string) {
    switch (codon) {
      case 'AUG':
        this.protein = Protein.Methionine;
        break;
      case 'UUU':
      case 'UUC':
        this.protein = Protein.Phenylalanine;
        break;
      case 'UUA':
      case 'UUG':
        this.protein = Protein.Leucine;
        break;
      case 'UCU':
      case 'UCC':
      case 'UCA':
      case 'UCG':
        this.protein = Protein.Serine;
        break;
      case 'UAU':
      case 'UAC':
        this.protein = Protein.Tyrosine;
        break;
      case 'UGU':
      case 'UGC':
        this.protein = Protein.Cysteine;
        break;
      case 'UGG':
        this.protein = Protein.Tryptophan;
        break;
      case 'UAA':
      case 'UAG':
      case 'UGA':
        this.protein = Protein.STOP;
        break;
      default:
        throw new Error('Input is not a valid codon');
    }
  }

  toProtein(): Protein {
    return this.protein;
  }
}

class ProteinTranslation {
  static proteins(rna: string): Protein[] {
    const proteins: Protein[] = [];

    for (const codon of rna.match(/.{1,3}/g) || []) {
      if (new Codon(codon).toProtein() === Protein.STOP) break;
      proteins.push(new Codon(codon).toProtein());
    }

    return proteins;
  }
}

export default ProteinTranslation;
